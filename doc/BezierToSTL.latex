\documentclass[paper=a4, fontsize=11pt]{scrartcl}

\usepackage[utf8]{inputenc}
% \usepackage{fourier} % Adobe Utopia
\usepackage[french]{babel}
% \usepackage{amsmath,amsfonts,amsthm}

\usepackage{sectsty}
\allsectionsfont{\normalfont\scshape} 

\usepackage{graphicx}

\usepackage{fancyhdr}
\pagestyle{fancyplain}
\fancyhead{}
\fancyfoot[L]{} 
\fancyfoot[C]{}
\fancyfoot[R]{\thepage}
\renewcommand{\headrulewidth}{0pt}
\renewcommand{\footrulewidth}{0pt}
\setlength{\headheight}{14.6pt}

\newcommand{\horrule}[1]{\rule{\linewidth}{#1}}

\title{
    \normalfont \normalsize
    \textsc{École nationale supérieure d'informatique et de mathématiques appliquées de Grenoble} \\ [25pt]
    \horrule{0.5pt} \\ [0.4cm]
    \huge BezierToSTL \\
    \horrule{2pt} \\[0.5cm]
}

\author{Robin VINCENT-DELEUZE \& Floran NARENJI-SHESHKALANI} 

\date{\normalsize\today}

\begin{document}

\maketitle

\section{Prélude}

Les références sont situées en fin de \texttt{README.md}.
Nous utilisons le système de gestion de version \textbf{git} sur la plateforme \textbf{github} afin de maintenir l'historique de nos modifications et de synchroniser le code entre les différents lieux et membres de l'équipe.

L'application se configure à l'aide des différents constantes présentes dans la fonction principale (fichier \texttt{src/beziertostl.adb}). L'exécutable est \texttt{bin/beziertostl}.

Des tests unitaires (couverture partielle) sont présents dans \texttt{src/test\_unitaires.adb} et sont exécutables via \texttt{bin/test\_unitaires}.

\section{Fonctionnement}

\subsection{Machine séquentielle à mots}

Le package \texttt{Iterateur\_Mots} est une machine séquentielle pour la lecture mot à mot (séparateur paramétrable) d'une \texttt{string}.
Il permet aussi un \texttt{look-ahead} sur le mot suivant.

\subsection{Parser SVG}

\subsubsection{Types \& Constantes}

Deux constantes définissent les séparateur: mot (espace) \& coordonnées (virgule), décimal (point).
Le type \texttt{Op\_Code} énumère les instructions supportées (MLHCQVmlhcqv).
Pour préserver la sensibilité à la casse, le type \texttt{character} est utilisé pour les valeurs de l'énumération.
On définit deux sous types, \texttt{Op\_Code\_Absolute} (majuscules) et \texttt{Op\_Code\_Relative} (minuscules).

\subsubsection{Algorithme}

Le parser\_svg ouvre le fichier et cherche la ligne avec le marqueur (constante du package). La lignée est nettoyée à l'aide d'un \texttt{trim} (\texttt{Ada.Strings}). \texttt{Iterateur\_Mot} est utilisé.

L'analyse de la courbe est un cycle:
\begin{enumerate}
    \item \label{E1} Lecture d'un opcode
    \item \label{E2} Selon l'opcode, lecture de N arguments (coordonnée seule ou pair)
    \item Ajout de la courbe à la liste (cf.~\ref{courbes})
    \item Si il y a encore des arguments, aller à l'étape~\ref{E2}
    \item Si il y a encore des mots, aller à l'étape~\ref{E1}
    \item Renvoie la liste de courbes décrivant la figure 
\end{enumerate}

On supprime le positionnement relatif en y ajoutant la position courante.

\subsection{Courbes} \label{courbes}

On souhaite découpler la gestion des courbes de celle du SVG\@. On choisit une représentation intermédiaire en arbre (héritage) dont la classe de base \texttt{Courbe} est abstraite. Les différentes courbes supportées (incluant la droite et le point seul nommé singleton) en héritent. Cette classe \texttt{Courbe} fournit deux contrats:
\begin{itemize}
    \item \texttt{Obtenir\_Point} renvoyant $(x, f(x))$ avec $f$ étant la fonction de la courbe.
    \item \texttt{Accepter} du patron de conception visiteur, permettant d'accepter une visite (cf.~\ref{interpolation}).
\end{itemize}
Cette représentation tente d'approcher le principe SOLID.

\subsection{Interpolation linéaire}\label{interpolation}

L'interpolation linéaire fournit un ensemble de segments approchant une courbe.
On choisit le patron de conception visiteur car l'interpolation:
\begin{itemize}
    \item Est un comportement que l'on peut ajouter à une courbe mais ne relève pas de la responsabiltié de la courbe.   
    \item Se comporte différement selon le type de courbe et le type d'interpolation souhaitée (\texttt{double dispatch}).
\end{itemize}

Réalisée dans le package \texttt{Courbe.Interpolation\_Lineaire}, l'interpolation linéaire d'une courbe consiste à la diviser en N points équidistants l'axe des abscisses et à calculer la valeur de la courbe aux points donnés.

\subsubsection{Algorithme de De Casteljau}

L'algorithme de De Casteljau est une approche récursive de type diviser pour mieux reigner au calcul des courbes de Bézier:
\begin{itemize}
    \item La courbe est-elle suffisamment plate?
    \item Si oui, interpolation de la courbe comme une droite
    \item Sinon, division de la courbe en deux courbes de Bézier et applications de l'algorithme aux deux courbes. 
\end{itemize}

La tolérance est le seul paramètre de l'algorithme: elle définit quand un courbe de bézier peut être considérée comme étant droite.

Cette méthode n'est disponible que pour les courbes de Bézier. C'est une implémentation de la méthode proposée dans \textit{Piecewise Linear Approximation of Bézier Curves}, par Kasper FISCHER (lien dans le README).

\subsection{Génération et Sauvegarde du STL}
On dispose de la valeur \texttt{M}, le pas de la rotation, calculée à partir du nombre de facette souhaité.
L'idée est de parcourir \texttt{Segments} par couples : on construit un "cercle" de facettes pour chaque paire de points 2D. Ainsi, pour les points consécutifs \texttt{P\_Suiv} et \texttt{P\_Cour}, on crée deux facettes conformément à l'image suivante :
\begin{center}
    \includegraphics{facettespng}
\end{center}
et on effectue une rotation de $\frac{2\pi}{M}$ pour chaque nouveau point.
La figure est ensuite exportée à l'aide de la procédure \texttt{Sauvegarde} vers un fichier STL\@. Le fichier sera crée ou tronqué si nécessaire.

\subsection{Cas d'erreurs}

3 cas d'erreurs sont relevés:
\begin{itemize}
    \item Le fichier source n'a pas pu être ouvert 
    \item Le fichier source est mal formé (suivi d'une indication)
    \item Le fichier source ne contenait pas de courbe
\end{itemize}

Les erreurs sont remontées à travers des exceptions.

\end{document}
